* 日付・時刻API
** Date and Time APIのパッケージ
   | パッケージ名       | 説明                                                                      |
   | java.time          | 日付と時刻を表すコアAPIを提供する                                         |
   | java.time.chrono   | 和暦など。独自のカレンダーシステムを定義できる                            |
   | java.time.format   | 日付と時刻のフォーマットおよび解析用APIを提供する                         |
   | java.time.temporal | 基本的な日付の単位（長さや概念）やフィールド（項目）に関するAPIを提供する |
   | java.time.zone     | タイムゾーンのサポートAPIを提供する                                       |
*** ローカル・タイム
    - 時差情報を含まない現地日時
    - ~java.timeパッケージ~ で提供
      - LocalDate
      - LocalTime
      - LocalDateTime
*** オフセット・タイム
    - 時差情報を含む日時
    - ~java.timeパッケージ~ で提供
      - OfsetTime(時間のみ)
      - OfsetDateTime(日付と時間)
      - ZonedDateTime（地域情報も含む）
*** 日本における ~2016/4/1 12:20:30~ を表す ~java.timeパッケージ~ のクラス
    |   | class          | year | month | date |  H |  M |  S |     td | area       |
    |---+----------------+------+-------+------+----+----+----+--------+------------|
    |   | LocalDate      | 2016 |    04 |   01 |    |    |    |        |            |
    |   | LocalTime      |      |       |      | 12 | 20 | 30 |        |            |
    |   | LocalDateTime  | 2016 |    04 |   01 | 12 | 20 | 30 |        |            |
    |---+----------------+------+-------+------+----+----+----+--------+------------|
    |   | OffsetTime     |      |       |      | 12 | 20 | 30 | +09:00 |            |
    |   | OffsetDateTime | 2016 |    04 |   01 | 12 | 20 | 30 | +09:00 |            |
    |   | ZonedDateTime  | 2016 |    04 |   01 | 12 | 20 | 30 | +09:00 | Asia/Tokyo |
    |---+----------------+------+-------+------+----+----+----+--------+------------|
    |   | Year           | 2016 |       |      |    |    |    |        |            |
    |   | YearMonth      | 2016 |    04 |      |    |    |    |        |            |
    |   | MonthDay       |      |    04 |   01 |    |    |    |        |            |
** ~java.time.temporal~
*** 日時を表現するクラスが実装しているインターフェイス
    - TemporalAccessor
    - Temporal(TemporalAccessorのサブインターフェイス)
** DayOfWeek
#+BEGIN_SRC java :results output :exports both :classname Foo
import java.time.*;

public class Foo {
  public static void main(String[] args) {
    for(DayOfWeek dayOfWeek : DayOfWeek.values()) {
      System.out.print(dayOfWeek + " ");
    }
  }
}
#+END_SRC

#+RESULTS:
: MONDAY TUESDAY WEDNESDAY THURSDAY FRIDAY SATURDAY SUNDAY 
** Month
#+BEGIN_SRC java :results output :exports both :classname Foo
import java.time.*;

public class Foo {
  public static void main(String[] args) {
    for(Month month : Month.values()) {
      System.out.print(month + " ");
    }
  }
}
#+END_SRC

#+RESULTS:
: JANUARY FEBRUARY MARCH APRIL MAY JUNE JULY AUGUST SEPTEMBER OCTOBER NOVEMBER DECEMBER 
** ~isXxx()~
   - String同様、値が同じであれば ~true~ となる
#+BEGIN_SRC java :results output :exports both :classname Foo
import java.time.LocalDateTime;
import java.time.LocalDate;

public class Foo {
  public static void main(String[] args) {
    LocalDate t1 = LocalDate.of(2019, 4, 1);
    LocalDate t2 = LocalDate.of(2019, 4, 1);
    System.out.println(t1.equals(t2));
    System.out.println(t1.isEqual(t2));
    System.out.println(t1.isBefore(t2));

    LocalDateTime d1 = LocalDateTime.of(2019, 4, 1, 12, 45, 17);
    LocalDateTime d2 = LocalDateTime.of(2019, 4, 1, 12, 45, 17);
    System.out.println(d1.equals(d2));
    System.out.println(d1.isEqual(d2));
    System.out.println(d1.isAfter(d2));
  }
}
#+END_SRC

#+RESULTS:
: true
: true
: false
: true
: true
: false
** ~form()~
   - ~情報が少ないもの.from(情報の多いもの)~ のイメージ
#+BEGIN_SRC java :results output :exports both :classname Foo
import java.time.*;

public class Foo {
  public static void main(String[] args) {
    LocalDateTime dateTime = LocalDateTime.of(2019, 4, 1, 11, 32, 45);
    LocalDate         date = LocalDate.of(2019, 4, 1);
    LocalTime         time = LocalTime.of(11, 32, 45);
    
    // OK : LocalDateTime -> LocalDateTime
    System.out.println(LocalDateTime.from(dateTime));

    // NG : LocalDate -> LocalDateTime
    try {
      System.out.println(LocalDateTime.from(date));
    } catch (Exception e) {
      System.out.println(e);
    }
    // NG : LocalTime -> LocalDateTime
    try {
      System.out.println(LocalDateTime.from(time));
    } catch (Exception e) {
      System.out.println(e);
    }

    // OK : LocalDateTime -> LocalDate
    System.out.println(LocalDate.from(dateTime));
    // OK : LocalDateTime -> LocalTime
    System.out.println(LocalTime.from(dateTime));
    // OK : OffsetDateTime -> LocalTime
    System.out.println(LocalTime.from(OffsetDateTime.now()));

    // OK : ZonedDateTime -> LocalDateTime
    System.out.println(LocalDateTime.from(ZonedDateTime.now()));
    // NG : ZonedDateTime <- LocalDateTime
    try {
      System.out.println(ZonedDateTime.from(LocalDateTime.now()));
    } catch(Exception e) {
      System.out.println(e);
    }
  }
}
#+END_SRC

#+RESULTS:
: 2019-04-01T11:32:45
: java.time.DateTimeException: Unable to obtain LocalDateTime from TemporalAccessor: 2019-04-01 of type java.time.LocalDate
: java.time.DateTimeException: Unable to obtain LocalDateTime from TemporalAccessor: 11:32:45 of type java.time.LocalTime
: 2019-04-01
: 11:32:45
: 17:37:47.051107
: 2019-09-18T17:37:47.051499
: java.time.DateTimeException: Unable to obtain ZonedDateTime from TemporalAccessor: 2019-09-18T17:37:47.051575 of type java.time.LocalDateTime

** 日付や時間の単位を表すインタフェースとその実装
*** TemporalUnit
    - 日付や時間の単位を表すインタフェース
*** ChronoUnit
    - 列挙型
    - TemporalUnitの実装
    - ~LocalDate.plus(long amountToAdd, TemporalUnit unit)~
**** ChronoUnitの主な列挙型
     | 列挙定数 | 説明              |
     | DAYS     | 1日の概念を表す   |
     | HOURS    | 1時間の概念を表す |
     | MINUTES  | 1分の概念を表す   |
     | MONTHS   | 1ヶ月の概念を表す |
     | SECONDS  | 1秒の概念を表す   |
     | WEEKS    | 1週間の概念を表す |
     | YEARS    | 1年の概念を表す   |
** TemporalUnitインタフェース
#+BEGIN_SRC java :results output :exports both :classname Foo
import java.time.*;
import java.time.temporal.*;

public class Foo {
  public static void main(String[] args) {
    LocalDate start = LocalDate.of(2016, 5, 30);
    LocalDate end   = LocalDate.of(2017, Month.MARCH, 31);
    
    // startから5日後を取得
    Temporal t = ChronoUnit.DAYS.addTo(start, 5);
    System.out.println(t);
    // startからendまでの日数を取得
    long days = ChronoUnit.DAYS.between(start, end);
    System.out.println(days);
  }
}
#+END_SRC

#+RESULTS:
: 2016-06-04
: 305
** ZoneId
#+BEGIN_SRC java :results output :exports both :classname Foo
import java.time.*;

public class Foo {
  public static void main(String[] args) {
    System.out.println(ZoneId.systemDefault());
  }
}
#+END_SRC

#+RESULTS:
: Asia/Tokyo
** DurationとPeriod
*** Duration
    - 時間ベースの時間量を表す
      | メソッド         | 説明                               |
      | int getNano()    | この間隔の秒内のナノ秒数を取得する |
      | int getSeconds() | この間隔の秒数を取得する           |
*** Period
    - 日付ベースの時間量を表す
      | メソッド        | 説明                     |
      | int getDays()   | この期間の日数を取得する |
      | int getMonths() | この期間の月数を取得する |
      | int getYears()  | この期間の年数を取得する |
#+BEGIN_SRC java :results output :exports both :classname Foo
import java.time.*;

public class Foo {
  public static void main(String[] args) {
    LocalDateTime startDateTime = LocalDateTime.of(2015,1,1,0,30);
    LocalDateTime endDateTime   = LocalDateTime.of(2015,1,2,23,0);
    Duration d = Duration.between(startDateTime, endDateTime);

    LocalDate startDate = LocalDate.now();
    LocalDate endDate   = startDate.plusDays(10);
    Period x = startDate.until(endDate);

    System.out.println(d.getSeconds());
    System.out.println(x.getDays());

  }
}
#+END_SRC

#+RESULTS:
: 167400
: 10
** 日時表示のフォーマット
   | フィールド      | 説明                                        |
   | BASIC_ISO_DATE  | 基本的なISO日付                             |
   | ISO_DATE        | オフセット付きまたはオフセットなしのISO日付 |
   | ISO_LOCAL_DATE  | ISOローカル日付                             |
   | ISO_OFFSET_TIME | オフセット付きの時間                        |
#+BEGIN_SRC java :results output :exports both :classname Foo
import java.util.*;
import java.time.*;
import java.time.format.*;

public class Foo {
  public static void main(String[] args) {
    DateTimeFormatter f1 = DateTimeFormatter.BASIC_ISO_DATE;
    DateTimeFormatter f2 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);

    System.out.println(f1.format(LocalDateTime.now()));
    System.out.println(f2.format(LocalDateTime.now()));
  }
}
#+END_SRC

#+RESULTS:
: 20190918
: 2019/09/18 19:19:23
** ~ofPattern()~
   | メソッド                                                          | 説明                                                     |
   | static DateTimeFormatter ofPattern(String pattern)                | 指定されたパターンを使用してフォーマッタを作成           |
   | static DateTimeFormatter ofPattern(String pattern, Locale locale) | 指定されたパターンとロケールを使用してフォーマッタを作成 |
** Instant
   - ~toEpochMilli~
   - ~getEpochSecond~
#+BEGIN_SRC java :results output :exports both :classname Foo
import java.time.*;

public class Foo {
  public static void main(String[] args) {
    System.out.println(Instant.EPOCH);
    System.out.println(Instant.now());
    System.out.println(Instant.now().toEpochMilli());   // EPOCHから何ミリ秒経過したか(long)
    System.out.println(Instant.now().getEpochSecond()); // EPOCHかん何秒経過したか(long)
  }
}
#+END_SRC

#+RESULTS:
: 1970-01-01T00:00:00Z
: 2019-09-18T10:42:20.822716Z
: 1568803340822
: 1568803340

