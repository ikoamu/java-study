* 第1章 Javaのクラス設計
<2019-09-13 金>
** ポリモーフィズム
   - 具体的な動作はメソッドのオーバーライドによって実現される

     (オーバーライドによる動的ポリモーフィズム)
*** is-a関係
    - インターフェイスの実装
    - クラス及びインターフェイスの継承
** オーバライド
*** アノテーション
#+BEGIN_SRC java :results output :exports both :classname OverrideAnotation
  public class OverrideAnotation {
    public static void main(String[] args) {
      Parent p = new Child();
      p.test();
    }
  }

  class Parent {
    void test() {
      System.out.println("Parent");
    }

    Parent test2() {
      return new Parent();
    }

    Parent test2(Parent p) {
      return p;
    }
  }

  class Child extends Parent {
    @Override
    protected void test() {
      System.out.println("Child");
    }

    // オーバーライドアノテーションを付与しているが、
    // 該当するメソッドがないので、コンパイルエラー（シグニチャが異なる）
    // @Override
    // void test(String a) {
    //   System.out.println(a);
    // }

    // 返り値がParentじゃなくてもOK
    @Override
    Child test2() {
      return new Child();
    }

    // 引数はだめ（コンパイルエラー）
    // @Override
    // Child test2(Child c) {
    //   return c;
    // }
  }
#+END_SRC

#+RESULTS:
: Child
** finalキーワード
   | 対象                                | 意味               |
   |-------------------------------------+--------------------|
   | finalクラス                         | 継承不可           |
   | final変数（フィールド及びローカル） | 再代入不可（定数） |
   | finalメソッド                       | オーバーライド不可 |
** 不変クラス（Immutable Class）
   - 不変クラスから生成されたインスタンスにおいて、一度設定された状態（フィールド値）を変更できない
*** 代表的な不変クラス
    - String
    - Integerなどのプリミティブ型ラッパークラス
    - BigDecimal
    - Color
    - LocalDate
*** メリット
    - 潜在的なバグを防ぐ
    - オブジェクトをキャッシュして利用する場合に、値が変更されていないことが保証されている
    - スレッドセーフなオブジェクトとして利用できる
*** 設計・実装
**** クラス
     - 継承されないように ~final~ 宣言する
**** すべてのフィールド
     - 継承されないようにfinal宣言する ~private final~ 宣言する
**** アクセサリメソッド
     - ゲッターメソッドのみ提供し、フィールド値を設定できるようなメソッドを提供しない
     - 配列やコレクションといった可変コンテナクラス（保持する要素を変更可能なクラス）や
     可変クラスへの参照を外部に公開しないようにする
     - ~this~ 参照を外部に公開しないようにする
** インターフェイス
   - Java8から実装を提供する ~defaultメソッド~ と、 ~staticメソッド~ を宣言できるようになった
*** staticメソッド
#+BEGIN_SRC java :results output :exports both :classname StaticInterfaceMethod
public class StaticInterfaceMethod {
  public static void main(String[] args) {
    Foo.x();
    Bar b = new Bar();
    // b.x();  <- Fooを実装したクラスのインスタンスからstaticメソッドは呼び出せない
    // Bar.x() <- Fooを実装したクラスからstaticメソッドは呼び出せない
  }
}

interface Foo {
  static void x() {
    System.out.println("staticメソッド");
  }
}

class Bar implements Foo {
}

#+END_SRC

#+RESULTS:
: staticメソッド
*** defaultメソッド
#+BEGIN_SRC java :results output :exports both :classname DefaultInterfaceMethod
public class DefaultInterfaceMethod {
  public static void main(String[] args) {
    Bar b = new Bar();
    b.x();
    b.y();
  }
}

interface Foo {
  default void x() {
    System.out.println("default of x");
  }

  default void y() {
    System.out.println("default of y");
  }
}

class Bar implements Foo {
  public void x() {  // <- publicにしなければコンパイルエラー
    System.out.println("X!");
  }
}

#+END_SRC

#+RESULTS:
: X!
: default of y
**** 同じdefaultメソッドを持つ複数のインターフェイスを実装するとコンパイルエラー
#+BEGIN_SRC java :results output :exports both :classname ExDefaultMethodError
public class ExDefaultMethodError {
  public static void main(String[] args) {
    new ExClass().x();
  }
}
interface Foo {
  default void x() {
    System.out.println("1");
  }
}
interface Bar {
  default void x() {
    System.out.println("2");
  }
}
class ExClass implements Foo, Bar {
  // オーバーライドすることでエラー回避
  @Override
  public void x() {
    System.out.println("3");
  }
}
#+END_SRC

#+RESULTS:
: 3
**** 菱形継承
#+BEGIN_SRC java :results output :exports both :classname ExDefaultMethodError2
public class ExDefaultMethodError2 implements A, B {
  public static void main(String[] args) {
    new ExDefaultMethodError2().x(); // <- 距離が近い方のdefaultメソッドが呼ばれる
  }
}

interface A {
  default void x() {
    System.out.println("1");
  }
}

interface B extends A {
  default void x() {
    System.out.println("2");
  }
}

interface C extends A {
}
#+END_SRC

#+RESULTS:
: 2
** 入れ子クラス（Nested Class）
   - あるブロック内 ~{}~ で宣言されたクラス
#+BEGIN_SRC java :results output :exports both :classname ExNestedClass
public class ExNestedClass {
  static class X {  // <- 小文字でclass
  }
  private class Y { // <- 小文字でclass
  }
  public static void main(String[] args) {
    class Z {} // <- 小文字でclass
  }
}
#+END_SRC

#+RESULTS:
: X
#+BEGIN_SRC java :results output :exports both :classname ExNestedClass2
public class ExNestedClass2 {
  public static void main(String[] args) {
    new Outer().new Inner1().doIt();
    new Outer().Inner2.doIt();
  }
}

class Outer {
  class Inner1 {
    public void doIt() {
      System.out.println("Inner1");
    }
  }
}
#+END_SRC

#+RESULTS:
: Inner1
** 匿名クラス（Anonymous Class）
#+BEGIN_SRC java
new 型名() {
  メソッドの実装
}
#+END_SRC
