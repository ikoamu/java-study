* コレクションとジェネリクス
** 1
   - ジェネリクス
     - 型の安全性を高めつつ、汎用的に型を扱うための仕組みを提供する
** 2
   - ジェネリクスと関連の深いテクノロジー
     - コレクション・フレームワーク
** 3
   - ジェネリック・クラスの宣言
     - ~class Foo<T>{}~
** 4
   - ジェネリック・クラスのインスタンス
     - ジェネリック・クラスや、ジェネリック・インタフェースを使用する場合には型変数に対して実際に利用する型を割り当てる必要がある
       このときの割り当てる型のことを ~型引数~ と呼ぶ
   - ~Foo<T>~ のインスタンスを生成する場合
     - ~○~ ~Foo<String> foo = new Foo<String>()~
     - ~○~ ~Foo<Object[]> foo = new Foo<>()~

       インスタンス生成における型引数の記述を省略できる
     - ~×~ ~Foo<String> foo = new Foo<>(){}~
       匿名クラスの場合は記述の省略ができない

       （ ~Foo<String> foo = new Foo<String>(){}~ はOK）
     - ~×~ ~Foo<int[]> foo = new Foo<>()~
       プリミティブ型はダメ
** 5
*** ジェネリクス・クラスで記述出来ないコード
     - ~static~ 修飾子付きの型変数

       ~ex.~ ~static T t;~
     - 型変数によるインスタンス生成

       ~ex.~ ~T obj = new T();~
     - 型変数を要素に指定する配列の生成

       ~ex.~ ~T[] = new T[3];~

     - ~instanceof~ 演算子による型の判定

       ~ex.~

       #+BEGIN_SRC java
       void doIt(T t) {
         if(t instanceof T) {
	   /* some code here */
	 }
       }
       #+END_SRC
     - 型変数に対する ~.class~ の参照

       ~ex.~

       #+BEGIN_SRC java
       void doIt() {
         Class<T> klass = T.class;
       }
       #+END_SRC
*** できる記述
    - ~T t;~
    - 
      #+BEGIN_SRC java
      void doIt() {
        /* some code here */
	return t;
      }
      #+END_SRC
** 6
   - ジェネリック・メソッドの宣言
     - ~<T> void doIt() {}~
       - 戻り値の記述の前で型パラメータを宣言する必要がある
       - ~<型パラメータ> 戻り値型 メソッド名(引数リスト) {}~
     - ※ ジェネリック・メソッドで宣言されている型変数はそのメソッド以外で参照することは出来ない
*** メソッド引数の型宣言に型変数 ~T~ を使用するジェネリック・メソッド
    #+BEGIN_SRC java
    class Foo {
      <T> void doIt(T t) {
        // some code here
      }
    }
    #+END_SRC
*** 戻り値の型宣言に型引数 ~T~ を使用するジェネリック・メソッド
    #+BEGIN_SRC java
    class Foo {
      <T> T doIt() {
        // some code here
      }
    }
    #+END_SRC
** 7
   - 型境界
     - 型変数が取り得る型に制約を課す事ができる
     - ~class Foo<T extends Number> {}~
       #+BEGIN_SRC java
       // OK
       Foo<Number>  f1 = new Foo<Number>();
       Foo<Integer> f2 = new Foo<Integer>();
       Foo<Double>  f3 = new Foo<Double>();
       
       // コンパイルエラー
       Foo<Object> f4 = new Foo<Object>();
       Foo<String> f5 = new Foo<String>();
       #+END_SRC

     - ~class Foo<T, U extends T> {}~
       #+BEGIN_SRC java
       class X {}
       class Y extends X {}
       class Z extends X {}
       #+END_SRC

       #+BEGIN_SRC java
       // OK
       Foo<X, Y> f1 = new Foo<X, Y>();
       Foo<X, Z> f2 = new Foo<X, Z>();
       
       // コンパイルエラー
       Foo<Y, Z> f3 = new Foo<Y, Z>();
       Foo<Z, X> f4 = new Foo<Z, X>();
       #+END_SRC
** 8
#+BEGIN_SRC java
public class A {}
public class B extends A {}
public class C extends B {}
public class X<T> {}

void doIt(X<? super B> obj) {}
#+END_SRC
  - 上記のようなメソッドを呼び出すコード
    - ~doIt(new X<A>())~
    - ~doIt(new X<B>())~
    - ~doIt(new X<Object>()~
  - ~?~ ワイルドカード
    何らかの型という意味（変数宣言時の時点では型引数に指定される方は未定であることを表す）
    - 型境界の設定
      - ~<? extends T>~
        型境界の上限をT型に設定
      - ~<? super T>~
        型境界の下限をT型に設定
      - ~<?>~
        境界なしワイルドカード( ~<? extends Object>~ と同じ)

** 9
#+BEGIN_SRC java
public class Foo<T> {}
#+END_SRC
  - 上記のようなクラスを継承するクラス
#+BEGIN_SRC java
// OK
class Bar extends Foo<String> {}
class Bar<T> extends Foo<Integer> {}
class Bar<T> extends Foo<T> {} // TはBar側で指定できるためエラーとならない

// コンパイルエラー
class Bar extends Foo<T> {} // Foo<T> クラスの型変数に対して型引数を指定していない
#+END_SRC
  - 総称型を実装または継承する場合、その総称型をパラメータ化(型引数を指定する)必要がある
** 10
   - java.util.List<E>
     - インデックスによって順序付けられるデータ構造を表すコレクション・インターフェイス
** 11
   - ArrayList
     - 要素に対するランダムアクセスが高速
     - 追加する要素が先頭に近いほどパフォーマンスが劣化する
       (すべての要素をコピーした後に新しい配列を生成する必要があるため)
   - LinkedList
     - ランダムアクセスはArrayListに比べてパフォーマンスが悪い
     - 先頭や末尾に要素を追加するため、ArrayListよりも優れている
** 12
   - Array.asList
     - Listオブジェクトを生成する
     - ArrayListと互換性はない
       - 以下はコンパイルエラーとなる
#+BEGIN_SRC java
ArrayList<Integer> list = Arrays.asList(1, 2, 3);
ArrayList list = (ArrayList<Integer>) Arrays.asList(1, 2, 3);
#+END_SRC         
** 14
   - Queue
     - First-In First-Out
** 15
   - Deque
     - Queue<E>インターフェイスのサブインターフェイス
     - 両端から要素を挿入、削除できるデータ構造を表現する
     - インデックスによる要素へのアクセスはサポートしていない
** 16
   - ArrayDeque
     - 内部で配列を使用したDequeインターフェイスの実装
     - FIFOとして用いる場合、LinkedListよりも高速
     - LIFOとして用いる場合、Stackよりも高速
     - スレッドセーフではない（Stackはスレッドセーフ）
     - nullは格納できない
** 17
   - Set
     - 重複を持たないことを保証するコレクション・インターフェイス
       - 重複 = ~equal~ メソッドによって等しいと判断された複数の要素
     - nullもユニークな要素のひとつ
** 18
   - Setインターフェイスの代表的な実装クラス
     - HashSet
       - 要素の管理にハッシュテーブルを使用している
     - TreeSet
       - 木構造に基づく実装であり、要素の順序付をサポートする
     - SortedSet
       - 順序付されたSet
