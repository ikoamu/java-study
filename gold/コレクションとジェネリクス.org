* コレクションとジェネリクス
** 1
   - ジェネリクス
     - 型の安全性を高めつつ、汎用的に型を扱うための仕組みを提供する
** 2
   - ジェネリクスと関連の深いテクノロジー
     - コレクション・フレームワーク
** 3
   - ジェネリック・クラスの宣言
     - ~class Foo<T>{}~
** 4
   - ジェネリック・クラスのインスタンス
     - ジェネリック・クラスや、ジェネリック・インタフェースを使用する場合には型変数に対して実際に利用する型を割り当てる必要がある
       このときの割り当てる型のことを ~型引数~ と呼ぶ
   - ~Foo<T>~ のインスタンスを生成する場合
     - ~○~ ~Foo<String> foo = new Foo<String>()~
     - ~○~ ~Foo<Object[]> foo = new Foo<>()~
       インスタンス生成における型引数の記述を省略できる
     - ~×~ ~Foo<String> foo = new Foo<>(){}~
       匿名クラスの場合は記述の省略ができない
       （ ~Foo<String> foo = new Foo<String>(){}~ はOK）
     - ~×~ ~Foo<int[]> foo = new Foo<>()~
       プリミティブ型はダメ
** 5 
   - ジェネリクス・クラスで記述出来ないコード
     - ~static~ 修飾子付きの型変数
       ~ex.~ ~static T t;~
     - 型変数によるインスタンス生成
       ~ex.~ ~T obj = new T();~
     - 型変数を要素に指定する配列の生成
       ~ex.~ ~T[] = new T[3];~       
     - ~instanceof~ 演算子による型の判定
       #+BEGIN_SRC java
       void doIt(T t) {
         
       #+END_SRC
     - 型変数に対する ~.class~ の参照

