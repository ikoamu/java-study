
* 受験の準備
  https://takakisan.com/java-certification-silver-application/
* ピアソンVUEのアカウントのパスワード
* 練習問題 <2019-09-02 月>
 https://javattemiru.com/category/java-silver%E7%B7%B4%E7%BF%92%E5%95%8F%E9%A1%8C/
** 2
*** 2-1
 #+BEGIN_SRC java :results output :exports both :classname Question_1_3
 class Question_1 {
     int num = 0;
 }
 class Question_1_2 extends Question_1 {
     int num = 1;
 }
 public class Question_1_3 {
     public static void main(String[] args) {
         Question_1 question_1 = new Question_1();
         Question_1 question_1_2 = new Question_1_2();
         System.out.println(question_1.num);
         System.out.println(question_1_2.num);
     }
 }
 #+END_SRC
 インスタンス生成時に、親クラスの型を指定しているので、親クラスのフィールド
 #+RESULTS:
 : 0
 : 0
*** 2-2
 #+BEGIN_SRC java :results output :exports both :classname Question_2
 public class Question_2 {
     public static void main(String[] args) {
         try {
           System.out.println(args[3]);
         } catch(Exception e) {
            System.out.println(e.getMessage()); 
         }
     }
 }

 #+END_SRC

 #+RESULTS:
 : Index 3 out of bounds for length 0
*** 2-3
 #+BEGIN_SRC java :results output :exports both :classname Q3
 public class Q3 {
   public static void main(String[] args) {
     int num1 = 2;
     int num2 = 5;

     while(num1 < num2) {
       num1++;
       num2++;

       if(num1 < num2) {
         System.out.println(num1 < num2);
         num2--;
       }
     }
   }
 }
 #+END_SRC

 #+RESULTS:
 : true
 : true
 : true

*** 2-4
 #+BEGIN_SRC java :results output :exports both :classname Q4
 public class Q4 {
   public static void main(String[] args) {
     char A = '1';
     char B = 1180;
     Integer C = null;
     // char c = "h";  <- ""で囲むとStringとして認識されてしまう
     // int  c = null; <- プリミティブ型はnullを代入できない!
     // char c = null; <- プリミティブ型はnullを代入できない!
     System.out.println(C);
   }
 }
 #+END_SRC

 #+RESULTS:
 : null
*** 2-5
 #+BEGIN_SRC java :results output :exports both :classname Q5
   public class Q5 {
     public static void main(String[] args) {
       String str = "A";
       String[] strArray = {"A","B","C"};
       /*
         caseというのはあくまで「そこに跳ぶ」というだけで、それ以降のcaseもお構いなしに全部実行してしまう
         -> breakしなければいけばい
       */
       switch(str) {
         // case strArray[0]: <- case式は定数じゃないと駄目
         // case strArray[1]:
         // case strArray[2]:
         case "A":
           System.out.println(strArray[0]);
           break; // <- breakがないとdefaultに入ってしまう
         case "B":
         case "C":
         // case 1: <- 各caseで示す値の型が異なっている場合は、コンパイルエラー

         default:System.out.println("D");
       }
     }
   }
 #+END_SRC

 #+RESULTS:
 : A

*** 2-6
 #+BEGIN_SRC java :results output :exports both :classname Q6
 public class Q6 {
   public static void main(String[] args) {
     StringBuilder sb = new StringBuilder();
     System.out.println(sb.capacity());
   }
 }
 #+END_SRC

 #+RESULTS:
 : 16

*** 2-7
 #+BEGIN_SRC java :results output :exports both :classname Q7
 public class Q7 {
   public static void main(String[] args) {
     String str = "";
     if (str.isEmpty()) { // null.isEmptyはヌルポで落る
       System.out.println("empty");
     } else {
       System.out.println("null");
     }
   }
 }
 #+END_SRC

 #+RESULTS:
 : empty
 #+END_SRC

*** 2-8
 #+BEGIN_SRC java :results output :exports both :classname Q8
 public class Q8 {
   public static void main(String[] args) {
     Integer[] array = {1,2,3,4,5};
     array[4] = null;
     for (int i = 0; i < array.length; i++) {
       System.out.print(array[i]);
     }
   }
 }
   
 #+END_SRC

 #+RESULTS:
 : 1234null

*** 2-9
 #+BEGIN_SRC java :results output :exports both :classname Q9
 public class Q9 {
   public static void main(String[] args) {
     String[] array1 = {"A","B","C","D","E"};
     String[] array2 = array1.clone();
     System.out.println(array1 == array2);
   }
 }
 #+END_SRC

 値は同じだが、参照先が異るため、falseとなる
 #+RESULTS:

** 3
*** 3-1
    #+BEGIN_SRC java :results output :exports both :classname Q31
    public class Q31 {
      public static void main(String[] args) {
        String[] strArray = new String[5];
        try {
          strArray[5] = "String";
          System.out.println(strArray[5]);
        } catch(Exception e) {
          System.out.println(e);
        }   
      }
    }
#+END_SRC

#+RESULTS:
: java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5

*** 3-2
#+BEGIN_SRC java :results output :exports both :classname Q22
abstract class AbstractClass {
  public static final String string = null;
  private static final Integer integer = null;
  private static final Boolean flg = null;
}

public class Q22 extends AbstractClass {
	public static void main(String[] args) {
		System.out.print(string);
		// System.out.print(integer); <- 親クラスのフィールドがprivate参照できない
		// System.out.print(flg);
	}
}
#+END_SRC

#+RESULTS:
: null

*** 3-6
    #+BEGIN_SRC java :results output :exports both :classname Q36
    public class Q36 {
      public static void main(String[] args) {
        int a = 1;
        if(a-- == 1) { // インクリメント、デクリメントはできる（判定後にインクリメントされる）
          System.out.println("true: " + a);
        } else {
          System.out.println("false: " + a);
        }
        System.out.println("finaly: " + a);
      }
    }
#+END_SRC

#+RESULTS:
: true: 0
: finaly: 0

*** 3-7
#+BEGIN_SRC java :results output :exports both :classname Q37
public class Q37 {
  public static void main(String[] args) {
    StringBuilder sb = new StringBuilder();
    sb.append("JAVA");
    for (int i = 0; i < 10; i++) {
      sb.reverse();
      sb.append("PO");
      System.out.println(sb);
    }
    System.out.println(sb.toString().endsWith("A"));
  }
}
#+END_SRC

#+RESULTS:
#+begin_example
AVAJPO
OPJAVAPO
OPAVAJPOPO
OPOPJAVAPOPO
OPOPAVAJPOPOPO
OPOPOPJAVAPOPOPO
OPOPOPAVAJPOPOPOPO
OPOPOPOPJAVAPOPOPOPO
OPOPOPOPAVAJPOPOPOPOPO
OPOPOPOPOPJAVAPOPOPOPOPO
false
#+end_example

*** 3-10
#+BEGIN_SRC java :results output :exports both :classname Q310
public class Q310 {
  public static void main(String[] args) {
    int i = 0;
    do {
      i++;
      System.out.println("1: " + i); 
    } while (i++ < 5);
      

    System.out.println("2: " + i); 

    if (!(i % 2 != 0)) {
      System.out.println("3: " + i); 
      String[] array = new String[i];
      System.out.println(array.length - 1);
      return;
    }

    System.out.println("example");
  }
}
#+END_SRC

#+RESULTS:
: 1: 1
: 1: 3
: 1: 5
: 2: 6
: 3: 6
: 5

** 4
*** 4-1
    #+BEGIN_SRC java :results output :exports both :classname Q41
    public class Q41 {
      public static void main(String[] args) {
        String str = "JAVA SILVER";
    	Runnable r = () -> {
    	  System.out.println(str += "a");
    	};
    	Thread thread = new Thread(r);
        thread.start();
      }
    }
#+END_SRC
ラムダ式から参照されるローカル変数は、finalまたは事実上のfinalである必要がある
-> コンンパイルエラー
#+RESULTS:
*** 4-2
#+BEGIN_SRC java :results output :exports both :classname Q42
public class Q42 {
  public static void main(String[] args) {
    method();
  }
  
  private void method() {
    for (int i = 0; i < 10; i++) {
      System.out.print("A");
    }
  }
}
#+END_SRC

staticでないメソッド method()をstaticコンテキストから参照することはできない
#+RESULTS:
*** 4-3

#+BEGIN_SRC java :results output :exports both :classname Q43
public class Q43 {
  public static void main(String[] args) {
    int a = 0b1010;
    System.out.println(a);
  }
}
#+END_SRC

#+RESULTS:
: 10

*** 4-8
#+BEGIN_SRC java :results output :exports both :classname Q48
public class Q48 {
  public static void main(String[] args) {
    String str = "Str";
    StringBuilder sb = new StringBuilder();
    for (char character : str.toCharArray()) {
      sb.append(character);
    }
    System.out.println(sb.toString().substring(0,0)); //0番目から0番目だけ表示
    System.out.println(sb.toString().substring(0,1));
    System.out.println(sb.toString().substring(0,2));
    System.out.println(sb.toString().substring(0,3));
    System.out.println(sb.toString().substring(0,sb.toString().length()));
    try {
    System.out.println(sb.toString().substring(0,4));
    } catch(Exception e) {
    System.out.println(e);
    }
  }
}
#+END_SRC

#+RESULTS:
: 
: S
: St
: Str
: Str
: java.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3

** 5
*** 5-5
    #+BEGIN_SRC java :results output :exports both :classname Q55
    public class Q55 {
      public static void main(String[] args) {
        String[] strArray = {"S","t","r","i","n","g"};
      for (String str : strArray) {
        str = "JAVA";
      }
        System.out.println(strArray[0]);
      }
    }
#+END_SRC
strは一時変数
#+RESULTS:
: S
*** 5-6
#+BEGIN_SRC java :results output :exports both :classname Q56
public class Q56 {
  public static void main(String[] args) {
    try {
      int a = Integer.parseInt("100L");
    } catch(Exception e) {
      System.out.println(e);
    }
  }
}
#+END_SRC

#+RESULTS:
: java.lang.NumberFormatException: For input string: "100L"

*** 5-7
#+BEGIN_SRC java :results output :exports both :classname Q59
public class Q59 {
  public static void main(String[] args) {
    String str = "JAVA SILVER";  
    System.out.println(str.replace("JAVA ", "")); // <- 代入していない
    System.out.println(str);
  }
}
#+END_SRC

#+RESULTS:
: SILVER
: JAVA SILVER

*** 5-10
#+BEGIN_SRC java :results output :exports both :classname Q510
public class Q510 {
  public static void main(String[] args) {
    StringBuilder sb = new StringBuilder("java");
    String[] array = sb.toString().split("a");
    for (int i = 0; i < array.length; i++) {
      System.out.print(array[i]);
    }
    for (int i = 0; i < array.length; i++) {
      array[i] = array[i] + "a";
    }
    for (int i = 0; i < array.length; i++) {
      System.out.print(array[i]);
    }
  }
}
#+END_SRC

#+RESULTS:
: jvjava

** Stringbuilder
   #+BEGIN_SRC java :results output :exports both :classname SbTest
   public class SbTest {
     public static void main(String[] args) {
       StringBuilder sb = new StringBuilder();
       sb.append(true);
       sb.append(false);
       System.out.println("1 : " + sb + ": size : " + sb.length()); // boolもいける

       sb.append('A');
       System.out.println("2 : " + sb + ": size : " + sb.length());

       char[] charArray = {'a','b','c','d'};
       sb.append(charArray, 1, 2); // char[], offset, length
       System.out.println("3 : " + sb + ": size : " + sb.length());

       System.out.println("4 : " + sb.append("HOGE") + ": size : " + sb.length());
       System.out.println("capacity : " + sb.capacity() + 
        " -> " + new StringBuilder(99).capacity());
       System.out.println("5 : " + sb.append(1) + ": size : " + sb.length());
       System.out.println("6 : " + sb.reverse() + ": size : " + sb.length());
       System.out.println("7 : " + sb.delete(1, 3) + ": size : " + sb.length());
       System.out.println("8 : " + sb.deleteCharAt(0) + ": size : " + sb.length());
       System.out.println("9 : " + sb.insert(5, "@@@") + ": size : " + sb.length());
     }
   }
#+END_SRC

#+RESULTS:
#+begin_example
1 : truefalse: size : 9
2 : truefalseA: size : 10
3 : truefalseAbc: size : 12
4 : truefalseAbcHOGE: size : 16
capacity : 16 -> 99
5 : truefalseAbcHOGE1: size : 17
6 : 1EGOHcbAeslafeurt: size : 17
7 : 1OHcbAeslafeurt: size : 15
8 : OHcbAeslafeurt: size : 14
9 : OHcbA@@@eslafeurt: size : 17
#+end_example

* 黒本
** 第2章 <2019-09-03 火>
*** 数値

    #+BEGIN_SRC java :results output :exports both :classname NumTest
    public class NumTest {
      public static void main(String[] args) {
        int a = 10;     // 10進
        int b = 012;    // 0NN  -> 8進
        int c = 0xA;    // 0xNN -> 16進
        int d = 0b1010; // 0bNN -> 2進

        System.out.println("a->"+a+", b->"+b+", c->"+c+", d->" + d);

        int e = 100___0____0____0; //アンスコは連続でもOK
        // int f = _100;
        // int g = 100_; 先頭と末尾はダメ
        
        // long h = 100_L; 記号の前後もダメ
        // float i = 100_F;
        // int j = 0x_AF;
        // int m = 0b_1001
        int k = 0xA_F;
        int n = 0_12;
        System.out.println("k->"+k+", n->"+n);
      }
    }
#+END_SRC

#+RESULTS:
: a->10, b->10, c->10, d->10
: k->175, n->10
*** 命名規則
  #+BEGIN_SRC java :results output :exports both :classname NamingTest
  public class NamingTest {
    public static void main(String[] args) {
      // 貨幣記号とアンスコは使える  
      int ￡_ = 11;
      String _hoge_1 = "hoge";
      // int 1hoge = 11; 数値からは使えない
      System.out.println("￡_->"+￡_ + " hoge_1" + _hoge_1);
    }
  }
#+END_SRC

#+RESULTS:
: ￡_->11 hoge_1hoge
** 第3章 <2019-09-03 火>
*** マイナス
#+BEGIN_SRC java :results output :exports both :classname MinusTest
public class MinusTest {
  public static void main(String[] args) {
    int a = -10;
    System.out.println(-a*-a - -a);
  }
}
#+END_SRC

#+RESULTS:
: 90
*** 型変換
#+BEGIN_SRC java :results output :exports both :classname Kata
public class Kata {
  public static void main(String[] args) {
    // byte a = 0b10000000; <- intだと思われてコンパイルエラーになる
    byte a = (byte) 0b10000000; // <-castしなければいけない
    System.out.println(a);
    // float b = 10.0; <- doubleだと思われてコンパイルエラーになる
    float b = (float)10.0;
    System.out.println(b);
  }
}
#+END_SRC

#+RESULTS:
: -128
: 10.0
*** インクリメント・デクリメント
#+BEGIN_SRC java :results output :exports both :classname IncrementDecrement
public class IncrementDecrement {
  public static void main(String[] args) {
    int a = 10;
    //      10   11   11   12    12  
    int b = a + a++ + ++a + a - a--;
    System.out.println(b);
  }
}
#+END_SRC

前置インクリメント ｰ> 演算結果を代入
後置インクリメント ｰ> もとの値のコピーが戻されてから加算
#+RESULTS:
: 32
*** switch
** 第4章 <2019-09-03 火>
*** 配列
#+BEGIN_SRC java :results output :exports both :classname ArrayTest
public class ArrayTest {
  public static void main(String[] args) {
    int[] array1 = new int[0]; // <- 配列数0 (要素数は後から変更できない)
    System.out.println("array1 is " + array1);
    int[] array2 = new int[1]; // <- 配列数1 (要素数は後から変更できない)
    System.out.println("array2 is " + array2[0]);

    // []は変数の後ろでも、データ型のうしろでもいい
    // -> 技術者への配慮
    int array3[] = {1, 2, 3}; // <- 配列数1 (要素数は後から変更できない)
    System.out.println("array3 is " + array3[0] + array3[1] + array3[2]);

    int[] array4[] = {{1, 2}, {3}}; // 二次元配列の宣言

    int[][] array5[] = { //三次元配列の宣言
                         {{ 1, 2, 3},{ 4, 5, 6}},
                         {{-1,-2,-3},{-4,-5,-6}},
                       };
    int array6[][] = new int[1][];
    // int array7[][] = new int[][1]; 一次元目の要素数は省略できない
    int[][] array8[] = new int[1][][];
    int[][] array9[] = new int[1][1][];
    // int[][] array10[] = new int[][1][1]; 一次元目の要素数は省略できない


    Item items[] = new Item[3]; // 配列をnewしただけであって、Itemのインスタンスは生成していない
    try {
      System.out.println(items[1].price);
    } catch (NullPointerException e) {
      System.out.println(e);
    }

    // int[] a = new int[2]{2, 3}; <- 次元式と初期化の両方を使用した配列の作成は無効です
    // int a1[] = {2, 3}; <--> int a1[] = new int[]{2,3};
    // int a2[] = {}; <------> int a2[] = new int[0];
    int b[][] = {};
    int[][] c = new int[][]{};
    /*
    int[] e;
    e = {2, 3}; <- 宣言のあとに初期演算子は使えない
    */
  }
}

class Item {
  String name;
  int price = 100;
}
#+END_SRC

#+RESULTS:
: array1 is [I@1f32e575
: array2 is 0
: array3 is 123
: java.lang.NullPointerException
*** arraycopy
#+BEGIN_SRC java :results output :exports both :classname ArrayCopyTest
public class ArrayCopyTest {
  public static void main(String[] args) {
    char[] charArray1 = {'a','b','c','d'};
    char charArray2[] = new char[charArray1.length];
    System.arraycopy(
      charArray1,        // コピー元
               1,        // コピー元の先頭を指定（0が一番前）
      charArray2,        // コピー先
               0,        // コピー先のどこからコピーを開始するか
      charArray2.length - 2 // コピーする要素数
    );
    for (char c : charArray2) {
      System.out.println(c);
    }

    System.arraycopy(
      charArray1,        // コピー元
               0,        // コピー元の先頭を指定（0が一番前）
      charArray2,        // コピー先
               0,        // コピー先のどこからコピーを開始するか
               3         // コピーする要素数
    );
    for (char c : charArray2) {
      System.out.println(c);
    }
  }
}
#+END_SRC

#+RESULTS:
: b
: c
: 
: 
: a
: b
: c
: 
** 第5章 <2019-09-03 火>
*** forループの構文
#+BEGIN_SRC java :results output :exports both :classname ForLoopTest
public class ForLoopTest {
  public static void main(String[] args) {
    // 初期化文で宣言する変数の型は１つだけ
    // int i = 0, int j = 5  <- error!
    // int i = 0, long j = 5 <- error!
    for(int i = 0, j = 5; i<= 2; i++, --j, func()) { // <- 定義した関数も更新文に入れれる
      System.out.println(i+ " <- i : j -> " +j);
    }
  }

  private static void func() {
    System.out.println("----------------");
  }
}
#+END_SRC

#+RESULTS:
: 0 <- i : j -> 5
: ----------------
: 1 <- i : j -> 4
: ----------------
: 2 <- i : j -> 3
: ----------------
*** インクリメント
#+BEGIN_SRC java :results output :exports both :classname IncrementTest
public class IncrementTest {
  public static void main(String[] args) {
    int num = 10;
    // "1"
    do {
      num++; // 11
    } while(++num < 12); // インクリメント後に判定
    System.out.println("1: " + num);

    num = 10;
    // "2"
    do {
      num++; // 11
    } while(num++ < 12); // 判定後にインクリメント
    System.out.println("2: " + num);


    num = 10;
    // "3"
    while(++num <= 10) {
      num++;
    }
    System.out.println("3: " + num);

    num = 10;
    // "4"
    while(num++ <= 10) { // 2回目のループに入るかどうかの判定あとにもインクリメントされる->13
      num++;
    }
    System.out.println("4: " + num);
  }
}
#+END_SRC

#+RESULTS:
: 1: 12
: 2: 14
: 3: 11
: 4: 13
*** ラベル
#+BEGIN_SRC java :results output :exports both :classname LabelTest
public class LabelTest {
  public static void main(String[] args) {
    // forループのラベル
    looplabel:
    for (int i = 1; i<=2; i++) {
      System.out.println("i -> " + i);
      for (int j = 0; j <=2; j++) {
        System.out.println("j -> " + j);
        if (j == i) {
          System.out.println("break(i,j)-> " + i + "," + j);
          break looplabel;
        }
      }
    }
  }
}
#+END_SRC

#+RESULTS:
: i -> 1
: j -> 0
: j -> 1
: break(i,j)-> 1,1
** 第6章 <2019-09-04 水>
*** staticなフィールド
#+BEGIN_SRC java :results output :exports both :classname StaticFieldTest
public class StaticFieldTest {
  public static void main(String[] args) {
    System.out.println(Sample.num);
    Sample.num = 100;
    System.out.println(Sample.num);

    Sample sample1 = new Sample();
    System.out.println(sample1.num);
    Sample sample2 = new Sample();
    System.out.println(sample2.num);

    sample1.num = 1000;
    System.out.println(sample2.num);
    System.out.println(Sample.num);
  }
}

class Sample {
  static int num = 10;
}
#+END_SRC

#+RESULTS:
: 10
: 100
: 100
: 100
: 1000
: 1000
*** 初期化ブロック
#+BEGIN_SRC java :results output :exports both :classname InitBlockTest
public class InitBlockTest {
  public static void main(String[] args) {
    Sample sample1 = new Sample();
    Sample sample2 = new Sample("hoge");
    System.out.println(sample1.b + " " + sample2.b);
  }
}

class Sample {

  public int b = 1;

  {
    System.out.println(b++);
    System.out.println("initblocktest1");
    System.out.println(b++);
  }
  
  public Sample() {
    System.out.println("1"); 
  }

  {
    System.out.println(b++);
    System.out.println("initblocktest2");
  }

  public Sample(String a) {
    System.out.println(b++);
    System.out.println("2 " + a); 
  }
}
#+END_SRC

#+RESULTS:
#+begin_example
1
initblocktest1
2
3
initblocktest2
1
1
initblocktest1
2
3
initblocktest2
4
2 hoge
4 5
#+end_example
*** コンストラクタのオーバーロード
#+BEGIN_SRC java :results output :exports both :classname ConstractaOverRoad
public class ConstractaOverRoad {
  public static void main(String[] args) {
    SampleA sample = new SampleA("po");
    SampleA sample2 = new SampleA();
  }
}

class SampleA {

  public SampleA() {
    // System.out.println("hoge~"); <-エラー: thisの呼出しはコンストラクタの先頭文である必要がある
    this("hoi");
  }
  public SampleA(String a) {
    System.out.println("fuga~" + a);
  }
}
  
#+END_SRC

#+RESULTS:
: fuga~po
: fuga~po
** 第7章 <2019-09-04 水>
*** 継承について
    - 継承で引き継がれないもの
      - コンストラクタ
      - privateなフィールド、メソッド
*** 抽象クラス
#+BEGIN_SRC java :results output :exports both :classname AbstractClassTest
public class AbstractClassTest {
  public static void main(String[] args) {
    Abs  c1 = new Conc();
    Conc c2  = new Conc();
    c1.sample();
    c2.sample();
  }
}

abstract class Abs {
  public void sample() {
    System.out.println("A");
    test();
    System.out.println("C");
  }
  
  protected abstract void test();
}

class Conc extends Abs {
  protected void test() {
    System.out.println("B");
  }
}
#+END_SRC
結果が同じとなる
#+RESULTS:
: A
: B
: C
: A
: B
: C
*** オーバーライド
    - オーバーライドの条件
      - シグニチャが同じであること
      - 戻り値が同じか、サブクラスであること
      - アクセス修飾子が同じか、よりゆるいもの

#+BEGIN_SRC java :results output :exports both :classname OverrideTest
public class OverrideTest {
  public static void main(String[] args) {
    
  }
}
#+END_SRC
*** インターフェイス
#+BEGIN_SRC java :results output :exports both :classname InterfaceTest
public class InterfaceTest {
  public static void main(String[] args) {
    Greet greet = new Greet() {
      public void sayHello(String name){
        System.out.println(name + " こんにちわ！");
      }
    };

    greet.sayHello("hoge");

    Greet lam = (name) -> {
      System.out.println(name + " こんばんわ！");};
    lam.sayHello("huga");

    Greet lam2 = name2 -> System.out.println(name2 + " Hello");
    

    lam2.sayHello("piyo");

    Hoge lam3 = piyo -> "PIYO -> " + piyo;  // {} ないときはreturn いらない
    System.out.println(lam3.piyo("HOGE"));
  }
}

interface Greet {       
  public void sayHello(String name);
}

interface Hoge {
  public String piyo(String piyo);
}
#+END_SRC

#+RESULTS:
: hoge こんにちわ！
: huga こんばんわ！
: piyo Hello
: PIYO -> HOGE
*** ダウンキャスト
#+BEGIN_SRC java :results output :exports both :classname DownCastTest
public class DownCastTest {
  public static void main(String[] args) {
    A a = new A();
    try {
      B b = (B) a;
    } catch(Exception e) {  // コンパイルエラーではなく、実行時エラーとなる。
      System.out.println(e);
    }
  }
}

class A {
  void hello() {
    System.out.println("A");
  }
}

class B extends A {
  void hello() {
    System.out.println("B");
  }
}

#+END_SRC

#+RESULTS:
: java.lang.ClassCastException: class A cannot be cast to class B (A and B are in unnamed module of loader 'app')
*** 継承関係とコンストラクタ
#+BEGIN_SRC java :results output :exports both :classname ConsTest
public class ConsTest {
  public static void main(String[] args) {
  A a = new B();
  }
}

class A {
  public A() {
    System.out.println("A");
  }

  public A(String s) {
    System.out.println(s);
  }
}

class B extends A {
  public B() {
    // super(); <- コンパイル時に自動追加される
    super("T");
    System.out.println("B");
  }
}

#+END_SRC

#+RESULTS:
: T
: B
** 第8章 <2019-09-05 木>
*** catch句とfinaly句の両方にreturnがあるとき
#+BEGIN_SRC java :results output :exports both :classname ReturnTest
public class ReturnTest {
  public static void main(String[] args) {
    System.out.println(sample());
  }

  private static String sample() {
    try {
      throw new RuntimeException();
//      return "C";
    } catch (Exception e) {
      return "A";
    } finally {
      return "B"; // <- finally の return が最終的に返る
    }
  }
}
#+END_SRC

#+RESULTS:
: B
*** RuntimeException
**** RuntimeException系の例外は、throws句やtry-catch句を強制されない
*** staticイニシャライザ
**** クラスを利用するときに、1度だけ呼び出される初期化ブロック
**** staticイニシャライザ内での例外は、ExceptionInitializerErrorとなる
** 第9章 <2019-09-05 木>
*** str.indexOf
#+BEGIN_SRC java :results output :exports both :classname StringIndexOfTest
public class StringIndexOfTest{
  public static void main(String[] args) {
    //            0123456
    String str = "abc1def";
    System.out.println(str.indexOf("1"));
    System.out.println(str.indexOf("c1"));
    System.out.println(str.indexOf(str));
    System.out.println(str.indexOf(""));  // 空文字は0
    System.out.println(str.indexOf("xx"));

    String str2 = "a1c1d11f"; // 最初に見つかったところ
    System.out.println(str2.indexOf("1"));
    System.out.println(str2.indexOf("1"));
  }
}
#+END_SRC

#+RESULTS:
: 3
: 2
: 0
: 0
: -1
: 1
*** str.substring
#+BEGIN_SRC java :results output :exports both :classname SubStringTest
public class SubStringTest {
  public static void main(String[] args) {
    String str = "abcdefg";                 //
    System.out.println(str.substring(0,1)); // 0 1 2 3 4 5 6 7
    System.out.println(str.substring(1,2)); // |a|b|c|d|e|f|g|
    System.out.println(str.substring(1,4)); // 
  }
}
#+END_SRC

#+RESULTS:
: a
: b
: bcd
*** str.trim
#+BEGIN_SRC java :results output :exports both :classname TrimTest
public class TrimTest {
  public static void main(String[] args) {
    String str = "        a b c   \t \r \n ";
    String result = str.trim();
    System.out.println("->" + result + "<-");
  }
}
#+END_SRC

#+RESULTS:
: ->a b c<-
*** str.replace
#+BEGIN_SRC java :results output :exports both :classname ReplaceTest
public class ReplaceTest {
  public static void main(String[] args) {
    String str = "aaaaa";
    System.out.println(str.replace("aa", "bb"));
  }
}
#+END_SRC

#+RESULTS:
: bbbba
*** str.startsWith str.endsWith
#+BEGIN_SRC java :results output :exports both :classname StartsEndsWith
public class StartsEndsWith {
  public static void main(String[] args) {
    String str = "abc12345efg";
    System.out.println(str.startsWith("abc") + " " + str.startsWith("abc12345efgh"));
    System.out.println(str.endsWith("g") + " " + str.endsWith("efg"));
  }
}
#+END_SRC

#+RESULTS:
: true false
: true true
*** null
#+BEGIN_SRC java :results output :exports both :classname NullAndStringTest
public class NullAndStringTest {
  public static void main(String[] args) {
    String str;// = null;
//    System.out.println(str);
    str += "null";
    System.out.println(str);
  }
}
#+END_SRC

#+RESULTS:
: null
: nullnull
*** StringBuilder
#+BEGIN_SRC java :results output :exports both :classname SbTest2
public class SbTest2 {
  public static void main(String[] args) {
    StringBuilder sb = new StringBuilder();
    System.out.println(sb.capacity());

    sb.append(true);
    sb.append(10);
    sb.append("bcde", 1, 3); // += cd
    
    char array[] = {'h','e','l','l','o'};
    sb.append(array);
    System.out.println(sb);

    StringBuilder sb2 = new StringBuilder("1234"); // length + 16
    System.out.println(sb2.capacity());
  }
}
#+END_SRC

#+RESULTS:
: 16
: true10cdhello
: 20
*** Sequence
#+BEGIN_SRC java :results output :exports both :classname SequenceTest
public class SequenceTest {
  public static void main(String[] args) {
    StringBuilder sb = new StringBuilder(); // 0 1 2 3 4 5
    sb.insert(0, "abcde");                  // |a|b|c|d|e| -> bcde
    CharSequence seq = sb.subSequence(1,5); //             0 1 2 3 4
    String str = new StringBuilder(seq).substring(1,3); // |b|c|d|e| -> cd
    System.out.println(str);
  }
}
#+END_SRC

#+RESULTS:
: cd
*** ラムダ式
#+BEGIN_SRC java :results output :exports both :classname LambdaArgTest
interface Func {
  String test(String test);
}

public class LambdaArgTest {
  public static void main(String[] args) {
    String val = "A";
//    Func f = (val) -> val + " " + val; <- エラー: valはすでにメソッドで定義されている
    Func f = str -> val + " " + " " + str;
    Func g = str -> {
//      val += "HOGE"; <- エラー: ラムダ式から参照されるローカル変数は、finalまたは事実上のfinalである必要がある
      return val + " " + val;
    };

    System.out.println(f.test("B") + g.test("C"));
  }
}
#+END_SRC

#+RESULTS:
: A  BA A
*** Predicate
#+BEGIN_SRC java :results output :exports both :classname PredicateTest
import java.util.function.Predicate;

public class PredicateTest {
  public static void main(String[] args) {
    Predicate<String> p = str -> {
      return "".equals(str);
    };

    System.out.println(p.test(""));
    System.out.println(p.test("a"));
  }
}
#+END_SRC

#+RESULTS:
: true
: false
*** LocalDate DateTime Time
#+BEGIN_SRC java :results output :exports both :classname LocalTimeTest
import java.time.LocalTime;

public class LocalTimeTest {
  public static void main(String[] args) {
    LocalTime time1 = LocalTime.of(0, 1, 2);
    LocalTime time2 = time1.plusHours(12);
    System.out.println(time1); // <- イミュータブル
    System.out.println(time2);
  }
}
#+END_SRC

#+RESULTS:
: 00:01:02
: 12:01:02
*** DurationとPeriod
#+BEGIN_SRC java :results output :exports both :classname DurationPeriodTest
import java.time.*;
import java.time.format.DateTimeFormatter;


public class DurationPeriodTest {
  public static void main(String[] args) {
    LocalDateTime startDateTime = LocalDateTime.of(2015,1,1,0,30); // 1/1 00:30
    LocalDateTime endDateTime   = LocalDateTime.of(2015,1,2,23,0); // 1/2 23:00
    Duration d = Duration.between(startDateTime, endDateTime);

    // Duration
    System.out.println(d.toHours()); // 分は見ていない
    System.out.println(d.toDays());  // 時刻は見ていない

    LocalDate startDate = LocalDate.now();
    LocalDate endDate   = startDate.plusDays(10);
    Period x = startDate.until(endDate);

    // Period
    System.out.println(x.getDays());
    System.out.println(x.getMonths());

    // 時刻のフォーマット
//    System.out.println(startDateTime.format(DateTimeFormatter.ISO_ZONED_DATE_TIME));
//    System.out.println(startDateTime.format(DateTimeFormatter.ISO_INSTANT));
    System.out.println(startDateTime.format(DateTimeFormatter.BASIC_ISO_DATE));
    System.out.println(startDateTime.format(DateTimeFormatter.ISO_DATE_TIME));
  }
}
#+END_SRC

#+RESULTS:
: 46
: 1
: 10
: 0
: 20150101
: 2015-01-01T00:30:00
    
*** list arraylist
#+BEGIN_SRC java :results output :exports both :classname ArrayListTest
import java.util.ArrayList;

public class ArrayListTest {
  public static void main(String[] args) {
    ArrayList list1 = new ArrayList<>(); // <- 型変数を指定しない場合、Object型を指定したとみなす
    list1.add(1);
    list1.add("string");
    list1.add(0, 'c');
    list1.add(list1.size(), 2L);
    System.out.println(
      list1.get(0)+" "+list1.get(1)+" "+list1.get(2)+" "+list1.get(3)
    );
    try {
      list1.add(100, 2L);
    } catch(Exception e) {
      System.out.println(e);
    }

    list1.remove("string");
    System.out.println(
      list1.get(0)+" "+list1.get(1)+" "+list1.get(2)
    );
  }
}
#+END_SRC

#+RESULTS:
: c 1 string 2
: java.lang.IndexOutOfBoundsException: Index: 100, Size: 4
: c 1 2

- リストから要素を削除した場合、後ろの要素が繰り上がる
  | A | B | C | D |
  |---+---+---+---|
  | A | C | D |   | 
  |---+---+---+---| 
*** removeIf
#+BEGIN_SRC java :results output :exports both :classname RemoveIfTest
import java.util.*;

public class RemoveIfTest {
  public static void main(String[] args) {
    // List<Integer> list = Arrays.asList(1,2,3,4,5,6,7,8,9,10); 固定長だとremoveIfできない
    List<Integer> list = new ArrayList(Arrays.asList(1,2,3,4,5,6,7,8,9,10));
    list.removeIf(n ->  n % 3 == 0);
    list.forEach(s -> System.out.println(s));
  }
}
#+END_SRC

#+RESULTS:
: 1
: 2
: 4
: 5
: 7
: 8
: 10
** テンプレート 
#+BEGIN_SRC java :results output :exports both :classname 
public class {
  public static void main(String[] args) {
  }
}
#+END_SRC

#+RESULTS:
