* 第11章 <2019-09-09 月>
** フィールドの初期値
 #+BEGIN_SRC java :results output :exports both :classname DefaultFieldsValue
 public class DefaultFieldsValue {
   static int a;
   static double b;
   static String c;
   static byte d;
   static char e;
   static boolean f;

   public static void main(String[] args) {
     System.out.println(a);
     System.out.println(b);
     System.out.println(c);
     System.out.println(d);
     // System.out.println(e);
     System.out.println(f);
   }
 }
 #+END_SRC

 #+RESULTS:
 : 0
 : 0.0
 : null
 : 0
 : false
** StringBuilderの初期値
#+BEGIN_SRC java :results output :exports both :classname DefaultStringBuilderValue
public class DefaultStringBuilderValue {
  public static void main(String[] args) {
    StringBuilder sb = new StringBuilder();
    System.out.println(sb); // <- 空文字（NullPointerExceptionにはならない）

    String a = "";
    System.out.println(a.equals(sb));
    System.out.println(a.equals(sb.toString()));
  }
}
#+END_SRC

#+RESULTS:
: 0
: 0.0
: null
: 0
: false
** 配列と拡張for文
#+BEGIN_SRC java :results output :exports both :classname KakuForLoopTest
public class KakuForLoopTest {
  public static void main(String[] args) {
    int a[][] = new int[2][4];
    a[0] = new int[]{1, 2, 3, 4};
    a[1] = new int[]{5, 6};
    for(int[] array : a) {
      for(int b : array) {
        System.out.println(b); // a[1][2], a[1][3]は null で拡張for文では回らない
      }
    }
  }
}
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: 4
: 5
: 6
** LocalDate
#+BEGIN_SRC java :results output :exports both :classname LocalDateTest
import java.time.*;

public class LocalDateTest {
  public static void main(String[] args) {
    LocalDateTime date = LocalDateTime.of(2015, 9, 15, 1, 1);
    date.plusDays(30);
    System.out.println(date); // <- イミュータブルなので30日プラスされていない

    date = date.plusDays(30);
    System.out.println(date); // <- 代入する
  }
}
#+END_SRC

#+RESULTS:
: 2015-09-15T01:01
: 2015-10-15T01:01
** アクセス修飾子
   | アクセス修飾子 | 同一クラス | 同一パッケージ | サブクラス | すべて |
   |----------------+------------+----------------+------------+--------|
   | public         | O          | O              | O          | O      |
   | protected      | O          | O              | O          | X      |
   | default        | O          | O              | X          | X      |
   | private        | O          | X              | X          | X      |
   同一パッケージ -> サブパッケージはX
** インターフェイス
   - インターフェイスに定める抽象メソッドは暗黙的に ~public~ 
     (インターフェイスは外部に公開することが目的であるため)
   - インターフェイスのアクセス修飾子は実装時に変更できない
   - また、クラスの継承でも、オーバーライドするメソッドはアクセス修飾子を厳しくできない
     (同じか、それよりもゆるい)
** 文字列の比較
#+BEGIN_SRC java :results output :exports both :classname CompareStringTest
public class CompareStringTest {
  public static void main(String[] args) {
    String a = "test";
    String b = "test";
    String c = new String("test");
    
    System.out.println("普通に定義したものだとtrueになる            -> " + (a == b));
    System.out.println("新しいインスタンスとして定義するとfalseになる -> " + (a == c));
    System.out.println(a.equals(b));

    StringBuilder sb = new StringBuilder("test");
    // System.out.println(a == sb); StirngとStringBuilderは比較できない（コンパイルエラー）
    System.out.println(a == sb.toString());
    b = sb.toString();
    System.out.println(b == sb.toString());
    a = b;
    System.out.println(a == b);
  }
}
#+END_SRC

#+RESULTS:
: 普通に定義したものだとtrueになる            -> true
: 新しいインスタンスとして定義するとfalseになる -> false
: true
: false
: false
: true
** mainのargs
#+BEGIN_SRC java :results output :exports both :classname ArgsTest
public class ArgsTest {
  public static void main(String[] args) {
    System.out.println(args.length);
    try {
      System.out.println(args[0]);
    } catch(Exception e) {
      System.out.println(e);
    }
  }
}
#+END_SRC
~args~ はなにも指定しない場合、サイズ0
#+RESULTS:
: 0
: java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0
** remove
#+BEGIN_SRC java :results output :exports both :classname RemoveTest
import java.util.*;

public class RemoveTest {
  public static void main(String[] args) {
    List<String> list = new ArrayList<>();
    list.add("A");
    list.add("B");
    list.add("C");
    list.add("D");
    list.add("A");

    list.remove("A"); // <- 一番始めの該当する文字が消される
    System.out.println("1: " + list);
    
    list.remove("Z"); // <- 該当する文字がない場合、例外などは投げられない
    System.out.println("2: " + list);

    list.remove(0); // <- 数値の場合は該当のインデックス
    System.out.println("3: " + list);

    try {
      list.remove(100);
    } catch(Exception e) {
      System.out.println("4: " + e);
    }

    List<Integer> list2 = new ArrayList<>();
    list2.add(5);
    list2.add(2);
    list2.add(1);
    System.out.println("5: " + list2);
    list2.remove(1); // インデックス
    System.out.println("6: " + list2);
  }
}
#+END_SRC

#+RESULTS:
: 1: [B, C, D, A]
: 2: [B, C, D, A]
: 3: [C, D, A]
: 4: java.lang.IndexOutOfBoundsException: Index 100 out of bounds for length 3
: 5: [5, 2, 1]
: 6: [5, 1]
** System.out.println
#+BEGIN_SRC java :results output :exports both :classname PrintlnTest
public class PrintlnTest {
  public static void main(String[] args) {
    System.out.println(2 + 2 + 4);
    System.out.println("先頭に文字列" + 2 + 2 + 4);
    System.out.println(2 + 2 + 4 + "後方に文字列");
    System.out.println("先頭に文字列" + 2 + 2 * 4);
    System.out.println(2 + 2 * 4 + "後方に文字列");
  }
}
#+END_SRC

#+RESULTS:
: 8
: 先頭に文字列224
: 8後方に文字列
: 先頭に文字列28
: 10後方に文字列
