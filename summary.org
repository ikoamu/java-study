* 総仕上げ問題 <2019-09-09 月>
** フィールドの初期値
 #+BEGIN_SRC java :results output :exports both :classname DefaultFieldsValue
 public class DefaultFieldsValue {
   static int a;
   static double b;
   static String c;
   static byte d;
   static char e;
   static boolean f;

   public static void main(String[] args) {
     int x;
     String y;
     boolean z;

     System.out.println(a);
     System.out.println(b);
     System.out.println(c);
     System.out.println(d);
     // System.out.println(e);
     System.out.println(f);

     // System.out.println(x); ローカル変数は初期化しないとコンパイルエラー
     // System.out.println(y);
     // System.out.println(z);
   }
 }
 #+END_SRC

 #+RESULTS:
 : 0
 : 0.0
 : null
 : 0
 : false
** StringBuilderの初期値
#+BEGIN_SRC java :results output :exports both :classname DefaultStringBuilderValue
public class DefaultStringBuilderValue {
  public static void main(String[] args) {
    StringBuilder sb = new StringBuilder();
    System.out.println(sb); // <- 空文字（NullPointerExceptionにはならない）

    String a = "";
    System.out.println(a.equals(sb));
    System.out.println(a.equals(sb.toString()));
  }
}
#+END_SRC

#+RESULTS:
: 0
: 0.0
: null
: 0
: false
** 配列と拡張for文
#+BEGIN_SRC java :results output :exports both :classname KakuForLoopTest
public class KakuForLoopTest {
  public static void main(String[] args) {
    int a[][] = new int[2][4];
    a[0] = new int[]{1, 2, 3, 4};
    a[1] = new int[]{5, 6};
    for(int[] array : a) {
      for(int b : array) {
        System.out.println(b); // a[1][2], a[1][3]は null で拡張for文では回らない
      }
    }

    int b[] = new int[5];
    b[0] = 0;
    b[1] = 200;
    for(int i : b) {
      System.out.println(i); // 値を格納していない場合 0
    }

    String[] c = new String[3];
    c[0] = "hoge";
    c[1] = "fuga";
    for(String i : c) {
      System.out.println(i); // 値を格納していない場合 null
    }

    boolean f[] = new boolean[3];
    f[0] = true;
    f[1] = true;
    for(boolean i : f) {
      System.out.println(i); // 値を格納していない場合 false
    }
  }
}
#+END_SRC

#+RESULTS:
#+begin_example
1
2
3
4
5
6
0
200
0
0
0
hoge
fuga
null
true
true
false
#+end_example
** LocalDate
#+BEGIN_SRC java :results output :exports both :classname LocalDateTest
import java.time.*;

public class LocalDateTest {
  public static void main(String[] args) {
    LocalDateTime date = LocalDateTime.of(2015, 9, 15, 1, 1);
    date.plusDays(30);
    System.out.println(date); // <- イミュータブルなので30日プラスされていない

    date = date.plusDays(30);
    System.out.println(date); // <- 代入する
  }
}
#+END_SRC

#+RESULTS:
: 2015-09-15T01:01
: 2015-10-15T01:01
** アクセス修飾子
   | アクセス修飾子 | 同一クラス | 同一パッケージ | サブクラス | すべて |
   |----------------+------------+----------------+------------+--------|
   | public         | O          | O              | O          | O      |
   | protected      | O          | O              | O          | X      |
   | default        | O          | O              | X          | X      |
   | private        | O          | X              | X          | X      |
   同一パッケージ -> サブパッケージはX
** インターフェイス
   - インターフェイスに定める抽象メソッドは暗黙的に ~public~ 
     (インターフェイスは外部に公開することが目的であるため)
   - インターフェイスのアクセス修飾子は実装時に変更できない
   - また、クラスの継承でも、オーバーライドするメソッドはアクセス修飾子を厳しくできない
     (同じか、それよりもゆるい)
** 文字列の比較
#+BEGIN_SRC java :results output :exports both :classname CompareStringTest
public class CompareStringTest {
  public static void main(String[] args) {
    String a = "test";
    String b = "test";
    String c = new String("test");
    
    System.out.println("普通に定義したものだとtrueになる            -> " + (a == b));
    System.out.println("新しいインスタンスとして定義するとfalseになる -> " + (a == c));
    System.out.println(a.equals(b));

    StringBuilder sb = new StringBuilder("test");
    // System.out.println(a == sb); StirngとStringBuilderは比較できない（コンパイルエラー）
    System.out.println(a == sb.toString());
    b = sb.toString();
    System.out.println(b == sb.toString());
    a = b;
    System.out.println(a == b);
  }
}
#+END_SRC

#+RESULTS:
: 普通に定義したものだとtrueになる            -> true
: 新しいインスタンスとして定義するとfalseになる -> false
: true
: false
: false
: true
** mainのargs
#+BEGIN_SRC java :results output :exports both :classname ArgsTest
public class ArgsTest {
  public static void main(String[] args) {
    System.out.println(args.length);
    try {
      System.out.println(args[0]);
    } catch(Exception e) {
      System.out.println(e);
    }
  }
}
#+END_SRC
~args~ はなにも指定しない場合、サイズ0
#+RESULTS:
: 0
: java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0
** remove
#+BEGIN_SRC java :results output :exports both :classname RemoveTest
import java.util.*;

public class RemoveTest {
  public static void main(String[] args) {
    List<String> list = new ArrayList<>();
    list.add("A");
    list.add("B");
    list.add("C");
    list.add("D");
    list.add("A");

    list.remove("A"); // <- 一番始めの該当する文字が消される
    System.out.println("1: " + list);
    
    list.remove("Z"); // <- 該当する文字がない場合、例外などは投げられない
    System.out.println("2: " + list);

    list.remove(0); // <- 数値の場合は該当のインデックス
    System.out.println("3: " + list);

    try {
      list.remove(100);
    } catch(Exception e) {
      System.out.println("4: " + e);
    }

    List<Integer> list2 = new ArrayList<>();
    list2.add(5);
    list2.add(2);
    list2.add(1);
    System.out.println("5: " + list2);
    list2.remove(1); // インデックス
    System.out.println("6: " + list2);
  }
}
#+END_SRC

#+RESULTS:
: 1: [B, C, D, A]
: 2: [B, C, D, A]
: 3: [C, D, A]
: 4: java.lang.IndexOutOfBoundsException: Index 100 out of bounds for length 3
: 5: [5, 2, 1]
: 6: [5, 1]
** System.out.println
#+BEGIN_SRC java :results output :exports both :classname PrintlnTest
public class PrintlnTest {
  public static void main(String[] args) {
    System.out.println(2 + 2 + 4);
    System.out.println("先頭に文字列" + 2 + 2 + 4);
    System.out.println(2 + 2 + 4 + "後方に文字列");
    System.out.println("先頭に文字列" + 2 + 2 * 4);
    System.out.println(2 + 2 * 4 + "後方に文字列");
  }
}
#+END_SRC

#+RESULTS:
: 8
: 先頭に文字列224
: 8後方に文字列
: 先頭に文字列28
: 10後方に文字列
** 抽象クラス
#+BEGIN_SRC java :results output :exports both :classname AbstractMethodTest
public class AbstractMethodTest extends AbstractClass {

  protected void test(){
    System.out.println("OK");
  }
// private void test(){} -> (protected)より弱いアクセス権限を割り当てるとコンパイルエラー

  public static void main(String[] args) {
    new AbstractMethodTest().test();
    test2();
  }
}

abstract class AbstractClass {

// protected void test(); メソッド本体がない -> abstractで修飾しなければならない（コンパイルエラー）
  protected abstract void test();

//  private static abstract void test2(); 修飾子~abstract~と ~private~ の組合せは不正（コンパイルエラー）
//  static abstract void test2();         修飾子~abstract~と ~static~ の組合せは不正（コンパイルエラー）
  static void test2() {
    System.out.println("OK!");
  }
}
#+END_SRC

#+RESULTS:
: OK
: OK!
** ポリモーフィズムの利点
   - 動的なコード
   - 再利可能
** 文字列の連結
#+BEGIN_SRC java :results output :exports both :classname ConcatTest
public class ConcatTest {
  public static void main(String[] args) {
    String a = "A";
    a.concat("B");
    System.out.println(a); // StringはイミュータブルであるためBは連結されていない
    a = a.concat("C");
    System.out.println(a);

    String b = "   A  ";
    b.trim();
    System.out.println(b);
    b = b.trim();
    System.out.println(b);
  }
}
#+END_SRC

#+RESULTS:
: A
: AC
:    A  
: A
** キャスト
#+BEGIN_SRC java :results output :exports both :classname CastTest
public class CastTest {
  public static void main(String[] args) {
    int a = 1;
    short b = 1;
    double c;
    String f = "->";

    c = (double) a + b;
    System.out.println(c);

    // f = (String) c; doubleをStringに変換できない
    // f = (String) a; intをStringに変換できない
    // System.out.println(a);

    long g = (long) a + b;
    // f = (String) g; longをStringに変換できない
    // System.out.println(g.toString()); longは間接参照できない
  }
}
#+END_SRC

#+RESULTS:
: 2.0
** Boolean
#+BEGIN_SRC java :results output :exports both :classname BooleanTest
public class BooleanTest {
  public static void main(String[] args) {
    // valueOfとparseBooleanには大文字小文字は関係ない
    Boolean b = Boolean.valueOf("TRUE");
    System.out.println(b);
    b = Boolean.parseBoolean("tRue");
    System.out.println(b);

    System.out.println(Boolean.valueOf(true));
    System.out.println(Boolean.valueOf("false"));
    System.out.println(Boolean.valueOf("f"));

    System.out.println(Boolean.parseBoolean("FalsEa"));
    System.out.println(Boolean.parseBoolean(""));
    System.out.println(Boolean.parseBoolean(null));
  }
}
#+END_SRC

#+RESULTS:
: true
: true
: true
: false
: false
: false
: false
: false
** 暗黙の型変換
#+BEGIN_SRC java :results output :exports both :classname TypeConvTest
public class TypeConvTest {
  public static void main(String[] args) {
    int a = 1;
    longOrShort(a); // <- intだとlongになる
    longOrShort((short)a);
  }

  private static void longOrShort(short a) {
    System.out.println("short");
  }

  private static void longOrShort(long a) {
    System.out.println("long");
  }
}
#+END_SRC

#+RESULTS:
: long
: short
** switch
#+BEGIN_SRC java :results output :exports both :classname PrintlnTest
public class PrintlnTest {
  public static void main(String[] args) {
    int a = 2;
    switch(a) {
      default: // defaultは一番上でもOK（aが1,2,3以外であれば DABCと出力される）
        System.out.println("D");
      case 1:
        System.out.println("A");
      case 2:
        System.out.println("B");
      case 3:
        System.out.println("C");
    }
  }
}
#+END_SRC

#+RESULTS:
: B
: C
* 覚える
** コンパイルエラー
   - インターフェイスのメソッドを実装するときに、アクセス修飾子が変更されていることでのコンパイルエラー
   - staticなメソッドでstaticでないフィールドを使っていることでのコンパイルエラー
   - ラムダ式内で定義した変数を式外で使っていることでのコンパイルエラー
     #+BEGIN_SRC java
     if(list.removeIf(String s) -> {return s.length() == 5;}) {
       System.out.println(s); // ここで変数sは使えない
     }
     #+END_SRC
     (~removeIf()~ は削除ができれば ~true~ を返す)
   - ローカル変数の初期化
#+BEGIN_SRC java :results output :exports both :classname LocalVariableTest
public class LocalVariableTest {
  static double X;  

  public static void main(String[] args) {
    double a, b, c;
    if(X == 0.0) { 
      a = 1.0;
      b = 2.0;
      c = 3.0;
    } // else {
      // a = 1.0;
      // b = 2.0;
      // c = 3.0;
    　// }
     System.out.println(a * b * c); // <- 初期化されない可能性がある（コンパイルエラー）
  }
}
#+END_SRC
** 例外
   - 要素にnullが含まれる配列をforで回すときに、 ~null.name~ などで ~NullPointerexception~ が投げられる場面
   - 例外に関する説明
     - ~RuntimeException~ クラスのすべてのサブクラスはキャッチもしくはthrow宣言をしなくてもよい
     - ~RuntimeException~ クラスを除く、 ~Exception~ クラスのすべてのサブクラスは検査例外である
     - ~catchブロック~ 内のパラメータは ~Throwable~ 型である
     - ~RuntimeException~ クラスのすべてのサブクラスは復旧可能である
     - ~Error~ クラスは非検査例外であり、プログラムから復帰できないような例外を表すクラスである
     - すべての例外（検査例外、非検査例外）は ~throws~ で宣言して、再スロー可能である
** 型変換
   - ~int~ から ~long~ は暗黙の型変換ができる -> キャスト不要
   - ~int~ から ~char~ はキャスト必要
   - ~97~ は char型に変換すると ~a~ 、 ~98~ は ~b~ となる
** コンストラクタ
   OK   : ~new Sample().test();~
   ERROR: ~new Sample.test();~
** StringBuilderのappendと参照型
#+BEGIN_SRC java :results output :exports both :classname SbAppendTest
public class SbAppendTest {
  public static void main(String[] args) {
    StringBuilder sb = new StringBuilder("A");
    System.out.println(sb);
    Sample.sample(sb);
    System.out.println(sb); // <- sb = sb.append("A"); とかしなくてよい（String型とは違う）
  }
}

class Sample {
  static void sample(StringBuilder sb) {
    sb.append(sb);
  }
}
#+END_SRC

#+RESULTS:
: A
: AA
** ラムダ式
   - よく間違えるもの
     - ~test(list, () -> s.num > 100);~ 
       -> ~()~ 内で ~s~ を宣言していない
     - ~test(list, Sample s -> s.num > 100);~ 
       -> ~()~ を省略する場合、 データ型を記述してはいけない（ ~(Sample s)~ ならOK ）
     - ~test(list, (Sample s) -> {s.num > 100});~ 
       -> 中括弧を使う場合、 ~return~ は省略できない
